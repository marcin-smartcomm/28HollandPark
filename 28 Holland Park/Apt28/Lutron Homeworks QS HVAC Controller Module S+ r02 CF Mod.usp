/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Lutron Homeworks QS HVAC Controller Parsing Module Simpl+ r02 CF Mod"
// #HINT ""
#DEFINE_CONSTANT HSPMIN 63
#DEFINE_CONSTANT HSPMAX 82
#DEFINE_CONSTANT CSPMIN 63
#DEFINE_CONSTANT CSPMAX 82
// #CATEGORY "" 
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#HELP_BEGIN
To be used only within Lutron Homeworks QS HVAC Controller Module.
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT HEAT_SET_POINT_UP, HEAT_SET_POINT_DOWN, COOL_SET_POINT_UP, COOL_SET_POINT_DOWN;
ANALOG_INPUT INT_ID;
STRING_INPUT IN$[50];
// BUFFER_INPUT

// DIGITAL_OUTPUT 
ANALOG_OUTPUT CURRENT_TEMPERATURE, HEAT_SET_POINT, COOL_SET_POINT;
STRING_OUTPUT TX$;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER HSPINT, CSPINT;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH HEAT_SET_POINT_UP
{
    IF (HSPINT<HSPMAX)
    {
    	HSPINT = HSPINT + 1;
    }
    ELSE
    {
    	HSPINT = HSPMAX;
    }
    MAKESTRING(TX$, "#HVAC,%d,2,%d,%d\n", INT_ID, CSPINT, CSPINT);
}

PUSH HEAT_SET_POINT_DOWN
{
    IF (HSPINT>HSPMIN)
    {
    	HSPINT = HSPINT - 1;
    }
    ELSE
    {
    	HSPINT = HSPMIN;
    }
    MAKESTRING(TX$, "#HVAC,%d,2,%d,%d\n", INT_ID, CSPINT, CSPINT);
}

PUSH COOL_SET_POINT_UP
{
    IF (CSPINT<CSPMAX)
    {
    	CSPINT = CSPINT + 1;
    }
    ELSE
    {
    	CSPINT = CSPMAX;
    }
    MAKESTRING(TX$, "#HVAC,%d,2,%d,%d\n", INT_ID, CSPINT, CSPINT);
}

PUSH COOL_SET_POINT_DOWN
{
    IF (CSPINT>CSPMIN)
    {
    	CSPINT = CSPINT - 1;
    }
    ELSE
    {
    	CSPINT = CSPMIN;
    }
    MAKESTRING(TX$, "#HVAC,%d,2,%d,%d\n", INT_ID, CSPINT, CSPINT);
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

CHANGE IN$
{
    STRING TEMP$[20];
    INTEGER ACTION_NUMBER;
    IF (FIND("~HVAC,", IN$) = 1)
   	{
   		TEMP$ = REMOVE("~HVAC,", IN$);
   		IF (ATOI(IN$)= INT_ID)
   		{
   			TEMP$ = REMOVE(",", IN$);
   			ACTION_NUMBER = ATOI(IN$);
   			TEMP$ = REMOVE(",", IN$);
   			SWITCH (ACTION_NUMBER)
   			{
   				CASE(1)://CURRENT TEMPERATURE
   				{
   					CURRENT_TEMPERATURE = ATOI(IN$);
   				}
   				CASE(2)://HEAT AND COOL SET POINTS
   				{
   					HSPINT = ATOI(IN$);
   					HEAT_SET_POINT = HSPINT;
   					TEMP$ = REMOVE(",", IN$);
   					CSPINT = ATOI(IN$);
   					COOL_SET_POINT = CSPINT;
   				}
   				
   			}
   		}
   	}
}

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    CLEARBUFFER(IN$);
}
