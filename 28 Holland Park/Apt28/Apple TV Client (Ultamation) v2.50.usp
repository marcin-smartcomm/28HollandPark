/*******************************************************************************
 * Apple TV Client SIMPL+ Module
 * Copyright (c) Ultamation Limited
 *
 * Ultamation Limited
 * E: info@ultamation.com
 * W: www.ultamation.com
 *
 * Module Summary:
 * 
 * Author:	Oliver Hall
 * Date:	Nov 2018, 2019, 2020, 2021
 * Info:	For interface details, please read the embedded help file
 *			See #HELP_BEGIN <-> #HELP_END
 *
 ******************************************************************************/

/*******************************************************************************
 * COMPILER DIRECTIVES
 ******************************************************************************/
// ENABLE DYNAMIC
#SYMBOL_NAME "Apple TV Client (Ultamation) v2.50"
#HELP_PDF_FILE "AppleTV IP Control Module Datasheet (Ultamation) v2.50.pdf"
#HINT "IP control of AppleTVs 4th & 5th generation via MediaRemote"
#DEFINE_CONSTANT		ATV_NAME_LEN					64
#CATEGORY "8" // Media Resource
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
AppleTV Remote SIMPL+ Wrapper - This version is only compatible with Database version 200+

Copyright:
This module is the copyright of Ultamation Ltd and
may not be used without the an appropriate licence
issued by Ultamation Ltd.

Summary:
Please refer to the datasheet for detailed integration and usage.

This module does not rely on, or share player usage data with, any external service.

Note:
3 and 4-Series ONLY - this module is entirely (apart from this basic wrapper) SIMPL#
Apple may change the API and authentication mechanisms at any time.  Ultamation do not provide any warranty
should Apple make changes which cause this module to stop functioning.
#HELP_END

/*******************************************************************************
 * INCLUDE LIBRARIES
 ******************************************************************************/
#USER_SIMPLSHARP_LIBRARY "MediaRemoteClientV2"

/*******************************************************************************
 * INPUTS & OUTPUTS
 ******************************************************************************/
DIGITAL_INPUT	_SKIP_, _SKIP_, ResetConnection, _SKIP_, NavUp, NavDown, NavLeft, NavRight, NavSelect, NavMenu, NavTopMenu, NavContextMenu;
DIGITAL_INPUT	_SKIP_, PlayPause, Play, Pause, Stop, Rewind, Forward, Next, Previous;
   
DIGITAL_INPUT	_SKIP_, GestureActive, _SKIP_;
DIGITAL_INPUT	SubscribeToFeedback, OpenTypeToSiri, HID_Press_Release, _SKIP_;
DIGITAL_INPUT   KeyboardEnter, KeyboardClear, KeyboardBack, _SKIP_;
ANALOG_INPUT	GestureX#, GestureY#, SetPosition#, _SKIP_;
ANALOG_INPUT	HID_Page#, HID_Key#,_SKIP_; 
STRING_INPUT	KeyboardText$[255];

DIGITAL_OUTPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_, ConfigLoaded, LicenceOk, Connected_Fb, Verified, _SKIP_;

DIGITAL_OUTPUT	KeyboardActive;
DIGITAL_OUTPUT	NowPlayingIsPlaying;
DIGITAL_OUTPUT	NowPlayingIsPaused, _SKIP_;

DIGITAL_OUTPUT	CanPlayPause, CanPlay, CanPause, CanStop, CanRewind, CanForward, CanNext, CanPrevious, _SKIP_;

DIGITAL_OUTPUT	ContentIsVideo, ContentIsAudio, _SKIP_;

ANALOG_OUTPUT	Connected_Status#, _SKIP_;

STRING_OUTPUT	Title$, Album$, Artist$, RadioStation$;
STRING_OUTPUT	ArtworkUrl$;
STRING_OUTPUT	ClientId$;
ANALOG_OUTPUT	Duration#, ElapsedTime#, Position#;

STRING_OUTPUT	KeyBoardFBText$;


/*******************************************************************************
 * PARAMETERS
 ******************************************************************************/
STRING_PARAMETER	AppleTvName[ATV_NAME_LEN];

/*******************************************************************************
 * PARAMETER PROPERTIES
 ******************************************************************************/
#BEGIN_PARAMETER_PROPERTIES AppleTvName
	propValidUnits = unitString; 
  	propDefaultValue = "Must be set!";
#END_PARAMETER_PROPERTIES                            

/*******************************************************************************
 * GLOBAL VARIABLES
 * Note:	Be sure to initialize all declared global variables as needed
 *			For example, in Function Main: g_temp = 0;
 * Conventions:
 *			Use a "g_" prefix for all global variables
 ******************************************************************************/
AppleTvClient g_atvClient;

/*******************************************************************************
 * EVENT HANDLERS
 ******************************************************************************/
PUSH ResetConnection { g_atvClient.ResetConnection(); }

THREADSAFE PUSH NavUp { g_atvClient.Up(); while( NavUp ){ delay(1); } g_atvClient.UpRelease(); }
THREADSAFE PUSH NavDown { g_atvClient.Down(); while( NavDown ){ delay(1); } g_atvClient.DownRelease();  }
THREADSAFE PUSH NavLeft { g_atvClient.Left(); while( NavLeft ){ delay(1); } g_atvClient.LeftRelease();  }
THREADSAFE PUSH NavRight { g_atvClient.Right(); while( NavRight ){ delay(1); } g_atvClient.RightRelease();  }
THREADSAFE PUSH NavSelect { g_atvClient.Select(); while( NavSelect ){ delay(1); } g_atvClient.SelectRelease();  }

THREADSAFE PUSH NavMenu { g_atvClient.Menu(); }
THREADSAFE PUSH NavTopMenu { g_atvClient.TopMenu(); }
THREADSAFE PUSH NavContextMenu { g_atvClient.ContextMenu(); }

THREADSAFE PUSH PlayPause { g_atvClient.PlayPause(); }
THREADSAFE PUSH Play { g_atvClient.Play(); }
THREADSAFE PUSH Pause { g_atvClient.Pause(); }
THREADSAFE PUSH Stop { g_atvClient.Stop(); }

THREADSAFE PUSH Rewind { g_atvClient.Rewind(); }
THREADSAFE RELEASE Rewind { g_atvClient.EndRewind(); }
THREADSAFE PUSH Forward { g_atvClient.Forward(); }
THREADSAFE RELEASE Forward { g_atvClient.EndForward(); }

THREADSAFE PUSH Next { g_atvClient.Next(); }
THREADSAFE PUSH Previous { g_atvClient.Previous(); }

THREADSAFE PUSH KeyboardEnter { g_atvClient.KeyboardEnter(); }
THREADSAFE PUSH KeyboardBack { g_atvClient.KeyboardBack(); }
THREADSAFE PUSH KeyboardClear { g_atvClient.KeyboardClear(); }

THREADSAFE CHANGE KeyboardText$
{
	g_atvClient.KeyboardTextMessage(KeyboardText$);
}
         
PUSH GestureActive
{
	//Began
	WAIT( 30 )
	{
		g_atvClient.GestureDown(GestureX#, GestureY#);	
	} 
}   

THREADSAFE CHANGE GestureX#, GestureY#
{
	//Moved
	if( GestureActive )
	{
		g_atvClient.GestureMove(GestureX#, GestureY#);
	}		
}

RELEASE GestureActive
{
	//Ended
	WAIT( 40 )
	{
    	g_atvClient.GestureUp(GestureX#, GestureY#);	
	}
}  

CHANGE SetPosition#
{
	g_atvClient.PositionSet(SetPosition#);
}

PUSH SubscribeToFeedback
{
	g_atvClient.SubscribeTo( 1, 1, 0, 1 );
}

RELEASE SubScribeToFeedback
{
	g_atvClient.SubscribeTo( 0, 0, 0, 1 );
}

PUSH HID_Press_Release
{
	g_atvClient.GenericHid( HID_Page#, HID_Key#, 1 );
}

RELEASE HID_Press_Release
{
	g_atvClient.GenericHid( HID_Page#, HID_Key#, 0 );
}

PUSH OpenTypeToSiri
{
	g_atvClient.TypeToSiri();
}
                                     
CALLBACK FUNCTION OnUpdateSocketStatus( INTEGER status )
{
	Connected_Status# = status;
	if( status = 2 )
		Connected_Fb = on;
	else
		Connected_Fb = off;
}
  
CALLBACK FUNCTION OnUpdatePairingStatus()
{
	Verified = g_atvClient.VerifiedSPLUS;
}

CALLBACK FUNCTION OnUpdatePlayerStatus()
{
	STRING tmp[255];

	tmp = g_atvClient.Title;
	Title$ = tmp;

    tmp = g_atvClient.Album;
	Album$ = tmp;
                       
	tmp = g_atvClient.Artist;
	Artist$ = tmp;

	tmp = g_atvClient.RadioStation;
	RadioStation$ = tmp;

	tmp = g_atvClient.ArtworkUrl;
	ArtworkUrl$ = tmp;

	tmp = g_atvClient.CurrentClientId;
	ClientId$ = tmp;

	Duration# = g_atvClient.Duration;
    ElapsedTime# = g_atvClient.ElapsedTime;
	Position# = g_atvClient.Position;

    if (g_atvClient.PlayingState = 1)
	{
		NowPlayingIsPlaying = 1;
		NowPlayingIsPaused = 0;
	}
	else if (g_atvClient.PlayingState = 2)
	{
        NowPlayingIsPlaying = 0;
		NowPlayingIsPaused = 1;
	}
	else 
	{
       	NowPlayingIsPlaying = 0;
		NowPlayingIsPaused = 0;
	}

	ContentIsVideo = g_atvClient.IsVideo;
	ContentIsAudio = g_atvClient.IsAudio;
}

CALLBACK FUNCTION OnUpdatePlayerCapabilities()
{
	CanPlayPause = g_atvClient.CanTogglePlayPause;
	CanPlay = g_atvClient.CanPlay;
	CanPause = g_atvClient.CanPause;
	CanStop = g_atvClient.CanStop;
	CanRewind = g_atvClient.CanRewind;
	CanForward = g_atvClient.CanFastForward;
	CanNext = g_atvClient.CanSkipNext;
	CanPrevious = g_atvClient.CanSkipBack;
}

CALLBACK FUNCTION OnUpdateKeyboardStatus()
{
	STRING tmp[255];
	tmp = g_atvClient.InputText;
   	KeyBoardFBText$ = tmp;
	KeyboardActive = g_atvClient.KeyboardActiveSPlus;
}

/*******************************************************************************
 * main()
 * This code will get called when the system starts up
 ******************************************************************************/
FUNCTION main()
{
	// Initialize declared global and local variables/arrays as needed.
	RegisterDelegate( g_atvClient, UpdateSocketStatus, OnUpdateSocketStatus );

	// playing Status Update
	RegisterDelegate( g_atvClient, UpdatePairingStatus, OnUpdatePairingStatus );
	RegisterDelegate( g_atvClient, UpdatePlayerStatus, OnUpdatePlayerStatus );
	RegisterDelegate( g_atvClient, UpdatePlayerCapabilities, OnUpdatePlayerCapabilities );
    RegisterDelegate( g_atvClient, UpdateKeyboardStatus, OnUpdateKeyboardStatus );
                                        
	g_atvClient.Initialise( AppleTvName, SubscribeToFeedback );

	ConfigLoaded = g_atvClient.ConfigLoaded;
	LicenceOk = g_atvClient.LicenceOk;
}
